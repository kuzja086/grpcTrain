// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/clickhouse_grpc.proto

package apiClick

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClickHouseClient is the client API for ClickHouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClickHouseClient interface {
	ExecuteQuery(ctx context.Context, in *QueryInfo, opts ...grpc.CallOption) (*Result, error)
	ExecuteQueryWithStreamInput(ctx context.Context, opts ...grpc.CallOption) (ClickHouse_ExecuteQueryWithStreamInputClient, error)
	ExecuteQueryWithStreamOutput(ctx context.Context, in *QueryInfo, opts ...grpc.CallOption) (ClickHouse_ExecuteQueryWithStreamOutputClient, error)
	ExecuteQueryWithStreamIO(ctx context.Context, opts ...grpc.CallOption) (ClickHouse_ExecuteQueryWithStreamIOClient, error)
}

type clickHouseClient struct {
	cc grpc.ClientConnInterface
}

func NewClickHouseClient(cc grpc.ClientConnInterface) ClickHouseClient {
	return &clickHouseClient{cc}
}

func (c *clickHouseClient) ExecuteQuery(ctx context.Context, in *QueryInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/clickhouse.grpc.ClickHouse/ExecuteQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickHouseClient) ExecuteQueryWithStreamInput(ctx context.Context, opts ...grpc.CallOption) (ClickHouse_ExecuteQueryWithStreamInputClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClickHouse_ServiceDesc.Streams[0], "/clickhouse.grpc.ClickHouse/ExecuteQueryWithStreamInput", opts...)
	if err != nil {
		return nil, err
	}
	x := &clickHouseExecuteQueryWithStreamInputClient{stream}
	return x, nil
}

type ClickHouse_ExecuteQueryWithStreamInputClient interface {
	Send(*QueryInfo) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type clickHouseExecuteQueryWithStreamInputClient struct {
	grpc.ClientStream
}

func (x *clickHouseExecuteQueryWithStreamInputClient) Send(m *QueryInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clickHouseExecuteQueryWithStreamInputClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clickHouseClient) ExecuteQueryWithStreamOutput(ctx context.Context, in *QueryInfo, opts ...grpc.CallOption) (ClickHouse_ExecuteQueryWithStreamOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClickHouse_ServiceDesc.Streams[1], "/clickhouse.grpc.ClickHouse/ExecuteQueryWithStreamOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &clickHouseExecuteQueryWithStreamOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClickHouse_ExecuteQueryWithStreamOutputClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type clickHouseExecuteQueryWithStreamOutputClient struct {
	grpc.ClientStream
}

func (x *clickHouseExecuteQueryWithStreamOutputClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clickHouseClient) ExecuteQueryWithStreamIO(ctx context.Context, opts ...grpc.CallOption) (ClickHouse_ExecuteQueryWithStreamIOClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClickHouse_ServiceDesc.Streams[2], "/clickhouse.grpc.ClickHouse/ExecuteQueryWithStreamIO", opts...)
	if err != nil {
		return nil, err
	}
	x := &clickHouseExecuteQueryWithStreamIOClient{stream}
	return x, nil
}

type ClickHouse_ExecuteQueryWithStreamIOClient interface {
	Send(*QueryInfo) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type clickHouseExecuteQueryWithStreamIOClient struct {
	grpc.ClientStream
}

func (x *clickHouseExecuteQueryWithStreamIOClient) Send(m *QueryInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clickHouseExecuteQueryWithStreamIOClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClickHouseServer is the server API for ClickHouse service.
// All implementations must embed UnimplementedClickHouseServer
// for forward compatibility
type ClickHouseServer interface {
	ExecuteQuery(context.Context, *QueryInfo) (*Result, error)
	ExecuteQueryWithStreamInput(ClickHouse_ExecuteQueryWithStreamInputServer) error
	ExecuteQueryWithStreamOutput(*QueryInfo, ClickHouse_ExecuteQueryWithStreamOutputServer) error
	ExecuteQueryWithStreamIO(ClickHouse_ExecuteQueryWithStreamIOServer) error
	mustEmbedUnimplementedClickHouseServer()
}

// UnimplementedClickHouseServer must be embedded to have forward compatible implementations.
type UnimplementedClickHouseServer struct {
}

func (UnimplementedClickHouseServer) ExecuteQuery(context.Context, *QueryInfo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedClickHouseServer) ExecuteQueryWithStreamInput(ClickHouse_ExecuteQueryWithStreamInputServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteQueryWithStreamInput not implemented")
}
func (UnimplementedClickHouseServer) ExecuteQueryWithStreamOutput(*QueryInfo, ClickHouse_ExecuteQueryWithStreamOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteQueryWithStreamOutput not implemented")
}
func (UnimplementedClickHouseServer) ExecuteQueryWithStreamIO(ClickHouse_ExecuteQueryWithStreamIOServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteQueryWithStreamIO not implemented")
}
func (UnimplementedClickHouseServer) mustEmbedUnimplementedClickHouseServer() {}

// UnsafeClickHouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClickHouseServer will
// result in compilation errors.
type UnsafeClickHouseServer interface {
	mustEmbedUnimplementedClickHouseServer()
}

func RegisterClickHouseServer(s grpc.ServiceRegistrar, srv ClickHouseServer) {
	s.RegisterService(&ClickHouse_ServiceDesc, srv)
}

func _ClickHouse_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickHouseServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clickhouse.grpc.ClickHouse/ExecuteQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickHouseServer).ExecuteQuery(ctx, req.(*QueryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickHouse_ExecuteQueryWithStreamInput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClickHouseServer).ExecuteQueryWithStreamInput(&clickHouseExecuteQueryWithStreamInputServer{stream})
}

type ClickHouse_ExecuteQueryWithStreamInputServer interface {
	SendAndClose(*Result) error
	Recv() (*QueryInfo, error)
	grpc.ServerStream
}

type clickHouseExecuteQueryWithStreamInputServer struct {
	grpc.ServerStream
}

func (x *clickHouseExecuteQueryWithStreamInputServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clickHouseExecuteQueryWithStreamInputServer) Recv() (*QueryInfo, error) {
	m := new(QueryInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ClickHouse_ExecuteQueryWithStreamOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClickHouseServer).ExecuteQueryWithStreamOutput(m, &clickHouseExecuteQueryWithStreamOutputServer{stream})
}

type ClickHouse_ExecuteQueryWithStreamOutputServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type clickHouseExecuteQueryWithStreamOutputServer struct {
	grpc.ServerStream
}

func (x *clickHouseExecuteQueryWithStreamOutputServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _ClickHouse_ExecuteQueryWithStreamIO_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClickHouseServer).ExecuteQueryWithStreamIO(&clickHouseExecuteQueryWithStreamIOServer{stream})
}

type ClickHouse_ExecuteQueryWithStreamIOServer interface {
	Send(*Result) error
	Recv() (*QueryInfo, error)
	grpc.ServerStream
}

type clickHouseExecuteQueryWithStreamIOServer struct {
	grpc.ServerStream
}

func (x *clickHouseExecuteQueryWithStreamIOServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clickHouseExecuteQueryWithStreamIOServer) Recv() (*QueryInfo, error) {
	m := new(QueryInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClickHouse_ServiceDesc is the grpc.ServiceDesc for ClickHouse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClickHouse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clickhouse.grpc.ClickHouse",
	HandlerType: (*ClickHouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteQuery",
			Handler:    _ClickHouse_ExecuteQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteQueryWithStreamInput",
			Handler:       _ClickHouse_ExecuteQueryWithStreamInput_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExecuteQueryWithStreamOutput",
			Handler:       _ClickHouse_ExecuteQueryWithStreamOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecuteQueryWithStreamIO",
			Handler:       _ClickHouse_ExecuteQueryWithStreamIO_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/clickhouse_grpc.proto",
}
