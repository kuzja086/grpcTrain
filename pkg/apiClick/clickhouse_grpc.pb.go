// This file describes gRPC protocol supported in ClickHouse.
//
// To use this protocol a client should send one or more messages of the QueryInfo type
// and then receive one or more messages of the Result type.
// According to that the service provides four methods for that:
// ExecuteQuery(QueryInfo) returns (Result)
// ExecuteQueryWithStreamInput(stream QueryInfo) returns (Result)
// ExecuteQueryWithStreamOutput(QueryInfo) returns (stream Result)
// ExecuteQueryWithStreamIO(stream QueryInfo) returns (stream Result)
// It's up to the client to choose which method to use.
// For example, ExecuteQueryWithStreamInput() allows the client to add data multiple times
// while executing a query, which is suitable for inserting many rows.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: proto/clickhouse_grpc.proto

package apiClick

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogsLevel int32

const (
	LogsLevel_LOG_NONE        LogsLevel = 0
	LogsLevel_LOG_FATAL       LogsLevel = 1
	LogsLevel_LOG_CRITICAL    LogsLevel = 2
	LogsLevel_LOG_ERROR       LogsLevel = 3
	LogsLevel_LOG_WARNING     LogsLevel = 4
	LogsLevel_LOG_NOTICE      LogsLevel = 5
	LogsLevel_LOG_INFORMATION LogsLevel = 6
	LogsLevel_LOG_DEBUG       LogsLevel = 7
	LogsLevel_LOG_TRACE       LogsLevel = 8
)

// Enum value maps for LogsLevel.
var (
	LogsLevel_name = map[int32]string{
		0: "LOG_NONE",
		1: "LOG_FATAL",
		2: "LOG_CRITICAL",
		3: "LOG_ERROR",
		4: "LOG_WARNING",
		5: "LOG_NOTICE",
		6: "LOG_INFORMATION",
		7: "LOG_DEBUG",
		8: "LOG_TRACE",
	}
	LogsLevel_value = map[string]int32{
		"LOG_NONE":        0,
		"LOG_FATAL":       1,
		"LOG_CRITICAL":    2,
		"LOG_ERROR":       3,
		"LOG_WARNING":     4,
		"LOG_NOTICE":      5,
		"LOG_INFORMATION": 6,
		"LOG_DEBUG":       7,
		"LOG_TRACE":       8,
	}
)

func (x LogsLevel) Enum() *LogsLevel {
	p := new(LogsLevel)
	*p = x
	return p
}

func (x LogsLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogsLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clickhouse_grpc_proto_enumTypes[0].Descriptor()
}

func (LogsLevel) Type() protoreflect.EnumType {
	return &file_proto_clickhouse_grpc_proto_enumTypes[0]
}

func (x LogsLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogsLevel.Descriptor instead.
func (LogsLevel) EnumDescriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{0}
}

type ObsoleteTransportCompression_CompressionAlgorithm int32

const (
	ObsoleteTransportCompression_NO_COMPRESSION ObsoleteTransportCompression_CompressionAlgorithm = 0
	ObsoleteTransportCompression_DEFLATE        ObsoleteTransportCompression_CompressionAlgorithm = 1
	ObsoleteTransportCompression_GZIP           ObsoleteTransportCompression_CompressionAlgorithm = 2
	ObsoleteTransportCompression_STREAM_GZIP    ObsoleteTransportCompression_CompressionAlgorithm = 3
)

// Enum value maps for ObsoleteTransportCompression_CompressionAlgorithm.
var (
	ObsoleteTransportCompression_CompressionAlgorithm_name = map[int32]string{
		0: "NO_COMPRESSION",
		1: "DEFLATE",
		2: "GZIP",
		3: "STREAM_GZIP",
	}
	ObsoleteTransportCompression_CompressionAlgorithm_value = map[string]int32{
		"NO_COMPRESSION": 0,
		"DEFLATE":        1,
		"GZIP":           2,
		"STREAM_GZIP":    3,
	}
)

func (x ObsoleteTransportCompression_CompressionAlgorithm) Enum() *ObsoleteTransportCompression_CompressionAlgorithm {
	p := new(ObsoleteTransportCompression_CompressionAlgorithm)
	*p = x
	return p
}

func (x ObsoleteTransportCompression_CompressionAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObsoleteTransportCompression_CompressionAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clickhouse_grpc_proto_enumTypes[1].Descriptor()
}

func (ObsoleteTransportCompression_CompressionAlgorithm) Type() protoreflect.EnumType {
	return &file_proto_clickhouse_grpc_proto_enumTypes[1]
}

func (x ObsoleteTransportCompression_CompressionAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObsoleteTransportCompression_CompressionAlgorithm.Descriptor instead.
func (ObsoleteTransportCompression_CompressionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{2, 0}
}

type ObsoleteTransportCompression_CompressionLevel int32

const (
	ObsoleteTransportCompression_COMPRESSION_NONE   ObsoleteTransportCompression_CompressionLevel = 0
	ObsoleteTransportCompression_COMPRESSION_LOW    ObsoleteTransportCompression_CompressionLevel = 1
	ObsoleteTransportCompression_COMPRESSION_MEDIUM ObsoleteTransportCompression_CompressionLevel = 2
	ObsoleteTransportCompression_COMPRESSION_HIGH   ObsoleteTransportCompression_CompressionLevel = 3
)

// Enum value maps for ObsoleteTransportCompression_CompressionLevel.
var (
	ObsoleteTransportCompression_CompressionLevel_name = map[int32]string{
		0: "COMPRESSION_NONE",
		1: "COMPRESSION_LOW",
		2: "COMPRESSION_MEDIUM",
		3: "COMPRESSION_HIGH",
	}
	ObsoleteTransportCompression_CompressionLevel_value = map[string]int32{
		"COMPRESSION_NONE":   0,
		"COMPRESSION_LOW":    1,
		"COMPRESSION_MEDIUM": 2,
		"COMPRESSION_HIGH":   3,
	}
)

func (x ObsoleteTransportCompression_CompressionLevel) Enum() *ObsoleteTransportCompression_CompressionLevel {
	p := new(ObsoleteTransportCompression_CompressionLevel)
	*p = x
	return p
}

func (x ObsoleteTransportCompression_CompressionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObsoleteTransportCompression_CompressionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_clickhouse_grpc_proto_enumTypes[2].Descriptor()
}

func (ObsoleteTransportCompression_CompressionLevel) Type() protoreflect.EnumType {
	return &file_proto_clickhouse_grpc_proto_enumTypes[2]
}

func (x ObsoleteTransportCompression_CompressionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObsoleteTransportCompression_CompressionLevel.Descriptor instead.
func (ObsoleteTransportCompression_CompressionLevel) EnumDescriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{2, 1}
}

type NameAndType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *NameAndType) Reset() {
	*x = NameAndType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clickhouse_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameAndType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameAndType) ProtoMessage() {}

func (x *NameAndType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clickhouse_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameAndType.ProtoReflect.Descriptor instead.
func (*NameAndType) Descriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *NameAndType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NameAndType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Describes an external table - a table which will exists only while a query is executing.
type ExternalTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the table. If omitted, "_data" is used.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
	Columns []*NameAndType `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// Data to insert to the external table.
	// If a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used,
	// then data for insertion to the same external table can be split between multiple QueryInfos.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Format of the data to insert to the external table.
	Format string `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	// Compression type used to compress `data`.
	// Supported values: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
	CompressionType string `protobuf:"bytes,6,opt,name=compression_type,json=compressionType,proto3" json:"compression_type,omitempty"`
	// Settings for executing that insertion, applied after QueryInfo.settings.
	Settings map[string]string `protobuf:"bytes,5,rep,name=settings,proto3" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExternalTable) Reset() {
	*x = ExternalTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clickhouse_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalTable) ProtoMessage() {}

func (x *ExternalTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clickhouse_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalTable.ProtoReflect.Descriptor instead.
func (*ExternalTable) Descriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *ExternalTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalTable) GetColumns() []*NameAndType {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ExternalTable) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExternalTable) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ExternalTable) GetCompressionType() string {
	if x != nil {
		return x.CompressionType
	}
	return ""
}

func (x *ExternalTable) GetSettings() map[string]string {
	if x != nil {
		return x.Settings
	}
	return nil
}

type ObsoleteTransportCompression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm ObsoleteTransportCompression_CompressionAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=clickhouse.grpc.ObsoleteTransportCompression_CompressionAlgorithm" json:"algorithm,omitempty"`
	Level     ObsoleteTransportCompression_CompressionLevel     `protobuf:"varint,2,opt,name=level,proto3,enum=clickhouse.grpc.ObsoleteTransportCompression_CompressionLevel" json:"level,omitempty"`
}

func (x *ObsoleteTransportCompression) Reset() {
	*x = ObsoleteTransportCompression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clickhouse_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsoleteTransportCompression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsoleteTransportCompression) ProtoMessage() {}

func (x *ObsoleteTransportCompression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clickhouse_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsoleteTransportCompression.ProtoReflect.Descriptor instead.
func (*ObsoleteTransportCompression) Descriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *ObsoleteTransportCompression) GetAlgorithm() ObsoleteTransportCompression_CompressionAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return ObsoleteTransportCompression_NO_COMPRESSION
}

func (x *ObsoleteTransportCompression) GetLevel() ObsoleteTransportCompression_CompressionLevel {
	if x != nil {
		return x.Level
	}
	return ObsoleteTransportCompression_COMPRESSION_NONE
}

// Information about a query which a client sends to a ClickHouse server.
// The first QueryInfo can set any of the following fields. Extra QueryInfos only add extra data.
// In extra QueryInfos only `input_data`, `external_tables`, `next_query_info` and `cancel` fields can be set.
type QueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    string            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	QueryId  string            `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Settings map[string]string `protobuf:"bytes,3,rep,name=settings,proto3" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Default database.
	Database string `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	// Input data, used both as data for INSERT query and as data for the input() function.
	InputData []byte `protobuf:"bytes,5,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	// Delimiter for input_data, inserted between input_data from adjacent QueryInfos.
	InputDataDelimiter []byte `protobuf:"bytes,6,opt,name=input_data_delimiter,json=inputDataDelimiter,proto3" json:"input_data_delimiter,omitempty"`
	// Default output format. If not specified, 'TabSeparated' is used.
	OutputFormat string `protobuf:"bytes,7,opt,name=output_format,json=outputFormat,proto3" json:"output_format,omitempty"`
	// Set it if you want the names and the types of output columns to be sent to the client.
	SendOutputColumns bool             `protobuf:"varint,24,opt,name=send_output_columns,json=sendOutputColumns,proto3" json:"send_output_columns,omitempty"`
	ExternalTables    []*ExternalTable `protobuf:"bytes,8,rep,name=external_tables,json=externalTables,proto3" json:"external_tables,omitempty"`
	UserName          string           `protobuf:"bytes,9,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Password          string           `protobuf:"bytes,10,opt,name=password,proto3" json:"password,omitempty"`
	Quota             string           `protobuf:"bytes,11,opt,name=quota,proto3" json:"quota,omitempty"`
	// Works exactly like sessions in the HTTP protocol.
	SessionId      string `protobuf:"bytes,12,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SessionCheck   bool   `protobuf:"varint,13,opt,name=session_check,json=sessionCheck,proto3" json:"session_check,omitempty"`
	SessionTimeout uint32 `protobuf:"varint,14,opt,name=session_timeout,json=sessionTimeout,proto3" json:"session_timeout,omitempty"`
	// Set `cancel` to true to stop executing the query.
	Cancel bool `protobuf:"varint,15,opt,name=cancel,proto3" json:"cancel,omitempty"`
	// If true there will be at least one more QueryInfo in the input stream.
	// `next_query_info` is allowed to be set only if a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used.
	NextQueryInfo bool `protobuf:"varint,16,opt,name=next_query_info,json=nextQueryInfo,proto3" json:"next_query_info,omitempty"`
	// Compression type for `input_data`.
	// Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
	// The client is responsible to compress data before putting it into `input_data`.
	InputCompressionType string `protobuf:"bytes,20,opt,name=input_compression_type,json=inputCompressionType,proto3" json:"input_compression_type,omitempty"`
	// Compression type for `output_data`, `totals` and `extremes`.
	// Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
	// The client receives compressed data and should decompress it by itself.
	// Consider also setting `output_compression_level`.
	OutputCompressionType string `protobuf:"bytes,21,opt,name=output_compression_type,json=outputCompressionType,proto3" json:"output_compression_type,omitempty"`
	// Compression level.
	// WARNING: If it's not specified the compression level is set to zero by default which might be not the best choice for some compression types (see below).
	// The compression level should be in the following range (the higher the number, the better the compression):
	// none: compression level isn't used
	// gzip: 0..9; 0 means no compression, 6 is recommended by default (compression level -1 also means 6)
	// brotli: 0..11
	// lzma: 0..9; 6 is recommended by default
	// zstd: 1..22; 3 is recommended by default (compression level 0 also means 3)
	// lz4: 0..16; values < 0 mean fast acceleration
	// bz2: 1..9
	OutputCompressionLevel int32 `protobuf:"varint,19,opt,name=output_compression_level,json=outputCompressionLevel,proto3" json:"output_compression_level,omitempty"`
	// Transport compression is an alternative way to make the server to compress its response.
	// This kind of compression implies that instead of compressing just `output` the server will compress whole packed messages of the `Result` type,
	// and then gRPC implementation on client side will decompress those messages so client code won't be bothered with decompression.
	// Here is a big difference between the transport compression and the compression enabled by setting `output_compression_type` because
	// in case of the transport compression the client code receives already decompressed data in `output`.
	// If the transport compression is not set here it can still be enabled by the server configuration.
	// Supported compression types: none, deflate, gzip, stream_gzip
	// Supported compression levels: 0..3
	// WARNING: Don't set `transport_compression` and `output_compression` at the same time because it will make the server to compress its output twice!
	TransportCompressionType  string `protobuf:"bytes,22,opt,name=transport_compression_type,json=transportCompressionType,proto3" json:"transport_compression_type,omitempty"`
	TransportCompressionLevel int32  `protobuf:"varint,23,opt,name=transport_compression_level,json=transportCompressionLevel,proto3" json:"transport_compression_level,omitempty"`
	// / Obsolete fields, should not be used in new code.
	ObsoleteResultCompression *ObsoleteTransportCompression `protobuf:"bytes,17,opt,name=obsolete_result_compression,json=obsoleteResultCompression,proto3" json:"obsolete_result_compression,omitempty"`
	ObsoleteCompressionType   string                        `protobuf:"bytes,18,opt,name=obsolete_compression_type,json=obsoleteCompressionType,proto3" json:"obsolete_compression_type,omitempty"`
}

func (x *QueryInfo) Reset() {
	*x = QueryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clickhouse_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInfo) ProtoMessage() {}

func (x *QueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clickhouse_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInfo.ProtoReflect.Descriptor instead.
func (*QueryInfo) Descriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *QueryInfo) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryInfo) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *QueryInfo) GetSettings() map[string]string {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *QueryInfo) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *QueryInfo) GetInputData() []byte {
	if x != nil {
		return x.InputData
	}
	return nil
}

func (x *QueryInfo) GetInputDataDelimiter() []byte {
	if x != nil {
		return x.InputDataDelimiter
	}
	return nil
}

func (x *QueryInfo) GetOutputFormat() string {
	if x != nil {
		return x.OutputFormat
	}
	return ""
}

func (x *QueryInfo) GetSendOutputColumns() bool {
	if x != nil {
		return x.SendOutputColumns
	}
	return false
}

func (x *QueryInfo) GetExternalTables() []*ExternalTable {
	if x != nil {
		return x.ExternalTables
	}
	return nil
}

func (x *QueryInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *QueryInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *QueryInfo) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *QueryInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *QueryInfo) GetSessionCheck() bool {
	if x != nil {
		return x.SessionCheck
	}
	return false
}

func (x *QueryInfo) GetSessionTimeout() uint32 {
	if x != nil {
		return x.SessionTimeout
	}
	return 0
}

func (x *QueryInfo) GetCancel() bool {
	if x != nil {
		return x.Cancel
	}
	return false
}

func (x *QueryInfo) GetNextQueryInfo() bool {
	if x != nil {
		return x.NextQueryInfo
	}
	return false
}

func (x *QueryInfo) GetInputCompressionType() string {
	if x != nil {
		return x.InputCompressionType
	}
	return ""
}

func (x *QueryInfo) GetOutputCompressionType() string {
	if x != nil {
		return x.OutputCompressionType
	}
	return ""
}

func (x *QueryInfo) GetOutputCompressionLevel() int32 {
	if x != nil {
		return x.OutputCompressionLevel
	}
	return 0
}

func (x *QueryInfo) GetTransportCompressionType() string {
	if x != nil {
		return x.TransportCompressionType
	}
	return ""
}

func (x *QueryInfo) GetTransportCompressionLevel() int32 {
	if x != nil {
		return x.TransportCompressionLevel
	}
	return 0
}

func (x *QueryInfo) GetObsoleteResultCompression() *ObsoleteTransportCompression {
	if x != nil {
		return x.ObsoleteResultCompression
	}
	return nil
}

func (x *QueryInfo) GetObsoleteCompressionType() string {
	if x != nil {
		return x.ObsoleteCompressionType
	}
	return ""
}

type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time             uint32    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	TimeMicroseconds uint32    `protobuf:"varint,2,opt,name=time_microseconds,json=timeMicroseconds,proto3" json:"time_microseconds,omitempty"`
	ThreadId         uint64    `protobuf:"varint,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	QueryId          string    `protobuf:"bytes,4,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Level            LogsLevel `protobuf:"varint,5,opt,name=level,proto3,enum=clickhouse.grpc.LogsLevel" json:"level,omitempty"`
	Source           string    `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Text             string    `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clickhouse_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clickhouse_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *LogEntry) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LogEntry) GetTimeMicroseconds() uint32 {
	if x != nil {
		return x.TimeMicroseconds
	}
	return 0
}

func (x *LogEntry) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *LogEntry) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *LogEntry) GetLevel() LogsLevel {
	if x != nil {
		return x.Level
	}
	return LogsLevel_LOG_NONE
}

func (x *LogEntry) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LogEntry) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Progress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadRows        uint64 `protobuf:"varint,1,opt,name=read_rows,json=readRows,proto3" json:"read_rows,omitempty"`
	ReadBytes       uint64 `protobuf:"varint,2,opt,name=read_bytes,json=readBytes,proto3" json:"read_bytes,omitempty"`
	TotalRowsToRead uint64 `protobuf:"varint,3,opt,name=total_rows_to_read,json=totalRowsToRead,proto3" json:"total_rows_to_read,omitempty"`
	WrittenRows     uint64 `protobuf:"varint,4,opt,name=written_rows,json=writtenRows,proto3" json:"written_rows,omitempty"`
	WrittenBytes    uint64 `protobuf:"varint,5,opt,name=written_bytes,json=writtenBytes,proto3" json:"written_bytes,omitempty"`
}

func (x *Progress) Reset() {
	*x = Progress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clickhouse_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Progress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Progress) ProtoMessage() {}

func (x *Progress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clickhouse_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Progress.ProtoReflect.Descriptor instead.
func (*Progress) Descriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *Progress) GetReadRows() uint64 {
	if x != nil {
		return x.ReadRows
	}
	return 0
}

func (x *Progress) GetReadBytes() uint64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *Progress) GetTotalRowsToRead() uint64 {
	if x != nil {
		return x.TotalRowsToRead
	}
	return 0
}

func (x *Progress) GetWrittenRows() uint64 {
	if x != nil {
		return x.WrittenRows
	}
	return 0
}

func (x *Progress) GetWrittenBytes() uint64 {
	if x != nil {
		return x.WrittenBytes
	}
	return 0
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows            uint64 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	Blocks          uint64 `protobuf:"varint,2,opt,name=blocks,proto3" json:"blocks,omitempty"`
	AllocatedBytes  uint64 `protobuf:"varint,3,opt,name=allocated_bytes,json=allocatedBytes,proto3" json:"allocated_bytes,omitempty"`
	AppliedLimit    bool   `protobuf:"varint,4,opt,name=applied_limit,json=appliedLimit,proto3" json:"applied_limit,omitempty"`
	RowsBeforeLimit uint64 `protobuf:"varint,5,opt,name=rows_before_limit,json=rowsBeforeLimit,proto3" json:"rows_before_limit,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clickhouse_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clickhouse_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *Stats) GetRows() uint64 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *Stats) GetBlocks() uint64 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *Stats) GetAllocatedBytes() uint64 {
	if x != nil {
		return x.AllocatedBytes
	}
	return 0
}

func (x *Stats) GetAppliedLimit() bool {
	if x != nil {
		return x.AppliedLimit
	}
	return false
}

func (x *Stats) GetRowsBeforeLimit() uint64 {
	if x != nil {
		return x.RowsBeforeLimit
	}
	return 0
}

type Exception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayText string `protobuf:"bytes,3,opt,name=display_text,json=displayText,proto3" json:"display_text,omitempty"`
	StackTrace  string `protobuf:"bytes,4,opt,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
}

func (x *Exception) Reset() {
	*x = Exception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clickhouse_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exception) ProtoMessage() {}

func (x *Exception) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clickhouse_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exception.ProtoReflect.Descriptor instead.
func (*Exception) Descriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *Exception) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Exception) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exception) GetDisplayText() string {
	if x != nil {
		return x.DisplayText
	}
	return ""
}

func (x *Exception) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

// Result of execution of a query which is sent back by the ClickHouse server to the client.
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId  string `protobuf:"bytes,9,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	TimeZone string `protobuf:"bytes,10,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// The format in which `output`, `totals` and `extremes` are written.
	// It's either the same as `output_format` specified in `QueryInfo` or the format specified in the query itself.
	OutputFormat string `protobuf:"bytes,11,opt,name=output_format,json=outputFormat,proto3" json:"output_format,omitempty"`
	// The names and types of columns of the result written in `output`.
	OutputColumns []*NameAndType `protobuf:"bytes,12,rep,name=output_columns,json=outputColumns,proto3" json:"output_columns,omitempty"`
	// Output of the query, represented in the `output_format`.
	Output   []byte      `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Totals   []byte      `protobuf:"bytes,2,opt,name=totals,proto3" json:"totals,omitempty"`
	Extremes []byte      `protobuf:"bytes,3,opt,name=extremes,proto3" json:"extremes,omitempty"`
	Logs     []*LogEntry `protobuf:"bytes,4,rep,name=logs,proto3" json:"logs,omitempty"`
	Progress *Progress   `protobuf:"bytes,5,opt,name=progress,proto3" json:"progress,omitempty"`
	Stats    *Stats      `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	// Set by the ClickHouse server if there was an exception thrown while executing.
	Exception *Exception `protobuf:"bytes,7,opt,name=exception,proto3" json:"exception,omitempty"`
	// Set by the ClickHouse server if executing was cancelled by the `cancel` field in QueryInfo.
	Cancelled bool `protobuf:"varint,8,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_clickhouse_grpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_proto_clickhouse_grpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_proto_clickhouse_grpc_proto_rawDescGZIP(), []int{8}
}

func (x *Result) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *Result) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *Result) GetOutputFormat() string {
	if x != nil {
		return x.OutputFormat
	}
	return ""
}

func (x *Result) GetOutputColumns() []*NameAndType {
	if x != nil {
		return x.OutputColumns
	}
	return nil
}

func (x *Result) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Result) GetTotals() []byte {
	if x != nil {
		return x.Totals
	}
	return nil
}

func (x *Result) GetExtremes() []byte {
	if x != nil {
		return x.Extremes
	}
	return nil
}

func (x *Result) GetLogs() []*LogEntry {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Result) GetProgress() *Progress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *Result) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Result) GetException() *Exception {
	if x != nil {
		return x.Exception
	}
	return nil
}

func (x *Result) GetCancelled() bool {
	if x != nil {
		return x.Cancelled
	}
	return false
}

var File_proto_clickhouse_grpc_proto protoreflect.FileDescriptor

var file_proto_clickhouse_grpc_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x22, 0x35,
	0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x97, 0x03, 0x0a, 0x1c, 0x4f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x52, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x4c, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x03, 0x22, 0x6b,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x22, 0x97, 0x09, 0x0a, 0x09,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x3c, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a,
	0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x6d, 0x0a,
	0x1b, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x19, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19,
	0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67,
	0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x6f, 0x77, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x6f, 0x77, 0x73, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x77, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x22, 0xe2, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x2a, 0x9d, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x47, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x47, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x5f, 0x44,
	0x45, 0x42, 0x55, 0x47, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x52,
	0x41, 0x43, 0x45, 0x10, 0x08, 0x32, 0xdb, 0x02, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x1b, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x57, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x17, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x18,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x4f, 0x12, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_clickhouse_grpc_proto_rawDescOnce sync.Once
	file_proto_clickhouse_grpc_proto_rawDescData = file_proto_clickhouse_grpc_proto_rawDesc
)

func file_proto_clickhouse_grpc_proto_rawDescGZIP() []byte {
	file_proto_clickhouse_grpc_proto_rawDescOnce.Do(func() {
		file_proto_clickhouse_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_clickhouse_grpc_proto_rawDescData)
	})
	return file_proto_clickhouse_grpc_proto_rawDescData
}

var file_proto_clickhouse_grpc_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_clickhouse_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_clickhouse_grpc_proto_goTypes = []interface{}{
	(LogsLevel)(0), // 0: clickhouse.grpc.LogsLevel
	(ObsoleteTransportCompression_CompressionAlgorithm)(0), // 1: clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm
	(ObsoleteTransportCompression_CompressionLevel)(0),     // 2: clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel
	(*NameAndType)(nil),                  // 3: clickhouse.grpc.NameAndType
	(*ExternalTable)(nil),                // 4: clickhouse.grpc.ExternalTable
	(*ObsoleteTransportCompression)(nil), // 5: clickhouse.grpc.ObsoleteTransportCompression
	(*QueryInfo)(nil),                    // 6: clickhouse.grpc.QueryInfo
	(*LogEntry)(nil),                     // 7: clickhouse.grpc.LogEntry
	(*Progress)(nil),                     // 8: clickhouse.grpc.Progress
	(*Stats)(nil),                        // 9: clickhouse.grpc.Stats
	(*Exception)(nil),                    // 10: clickhouse.grpc.Exception
	(*Result)(nil),                       // 11: clickhouse.grpc.Result
	nil,                                  // 12: clickhouse.grpc.ExternalTable.SettingsEntry
	nil,                                  // 13: clickhouse.grpc.QueryInfo.SettingsEntry
}
var file_proto_clickhouse_grpc_proto_depIdxs = []int32{
	3,  // 0: clickhouse.grpc.ExternalTable.columns:type_name -> clickhouse.grpc.NameAndType
	12, // 1: clickhouse.grpc.ExternalTable.settings:type_name -> clickhouse.grpc.ExternalTable.SettingsEntry
	1,  // 2: clickhouse.grpc.ObsoleteTransportCompression.algorithm:type_name -> clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm
	2,  // 3: clickhouse.grpc.ObsoleteTransportCompression.level:type_name -> clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel
	13, // 4: clickhouse.grpc.QueryInfo.settings:type_name -> clickhouse.grpc.QueryInfo.SettingsEntry
	4,  // 5: clickhouse.grpc.QueryInfo.external_tables:type_name -> clickhouse.grpc.ExternalTable
	5,  // 6: clickhouse.grpc.QueryInfo.obsolete_result_compression:type_name -> clickhouse.grpc.ObsoleteTransportCompression
	0,  // 7: clickhouse.grpc.LogEntry.level:type_name -> clickhouse.grpc.LogsLevel
	3,  // 8: clickhouse.grpc.Result.output_columns:type_name -> clickhouse.grpc.NameAndType
	7,  // 9: clickhouse.grpc.Result.logs:type_name -> clickhouse.grpc.LogEntry
	8,  // 10: clickhouse.grpc.Result.progress:type_name -> clickhouse.grpc.Progress
	9,  // 11: clickhouse.grpc.Result.stats:type_name -> clickhouse.grpc.Stats
	10, // 12: clickhouse.grpc.Result.exception:type_name -> clickhouse.grpc.Exception
	6,  // 13: clickhouse.grpc.ClickHouse.ExecuteQuery:input_type -> clickhouse.grpc.QueryInfo
	6,  // 14: clickhouse.grpc.ClickHouse.ExecuteQueryWithStreamInput:input_type -> clickhouse.grpc.QueryInfo
	6,  // 15: clickhouse.grpc.ClickHouse.ExecuteQueryWithStreamOutput:input_type -> clickhouse.grpc.QueryInfo
	6,  // 16: clickhouse.grpc.ClickHouse.ExecuteQueryWithStreamIO:input_type -> clickhouse.grpc.QueryInfo
	11, // 17: clickhouse.grpc.ClickHouse.ExecuteQuery:output_type -> clickhouse.grpc.Result
	11, // 18: clickhouse.grpc.ClickHouse.ExecuteQueryWithStreamInput:output_type -> clickhouse.grpc.Result
	11, // 19: clickhouse.grpc.ClickHouse.ExecuteQueryWithStreamOutput:output_type -> clickhouse.grpc.Result
	11, // 20: clickhouse.grpc.ClickHouse.ExecuteQueryWithStreamIO:output_type -> clickhouse.grpc.Result
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_clickhouse_grpc_proto_init() }
func file_proto_clickhouse_grpc_proto_init() {
	if File_proto_clickhouse_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_clickhouse_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameAndType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clickhouse_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clickhouse_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsoleteTransportCompression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clickhouse_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clickhouse_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clickhouse_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Progress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clickhouse_grpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clickhouse_grpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_clickhouse_grpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_clickhouse_grpc_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_clickhouse_grpc_proto_goTypes,
		DependencyIndexes: file_proto_clickhouse_grpc_proto_depIdxs,
		EnumInfos:         file_proto_clickhouse_grpc_proto_enumTypes,
		MessageInfos:      file_proto_clickhouse_grpc_proto_msgTypes,
	}.Build()
	File_proto_clickhouse_grpc_proto = out.File
	file_proto_clickhouse_grpc_proto_rawDesc = nil
	file_proto_clickhouse_grpc_proto_goTypes = nil
	file_proto_clickhouse_grpc_proto_depIdxs = nil
}
